[{"/J3SUNG/twitter/src/index.js":"1","/J3SUNG/twitter/src/components/App.js":"2","/J3SUNG/twitter/src/components/Router.js":"3","/J3SUNG/twitter/src/routes/Home.js":"4","/J3SUNG/twitter/src/routes/Auth.js":"5","/J3SUNG/twitter/src/fbase.js":"6","/J3SUNG/twitter/src/components/Navigation.js":"7","/J3SUNG/twitter/src/routes/Profile.js":"8","/J3SUNG/twitter/src/components/Tweet.js":"9"},{"size":206,"mtime":1610007345680,"results":"10","hashOfConfig":"11"},{"size":709,"mtime":1610373001820,"results":"12","hashOfConfig":"11"},{"size":937,"mtime":1610384005750,"results":"13","hashOfConfig":"11"},{"size":2515,"mtime":1610380920360,"results":"14","hashOfConfig":"11"},{"size":2290,"mtime":1610007223660,"results":"15","hashOfConfig":"11"},{"size":710,"mtime":1610377784640,"results":"16","hashOfConfig":"11"},{"size":288,"mtime":1609960151280,"results":"17","hashOfConfig":"11"},{"size":713,"mtime":1610384924450,"results":"18","hashOfConfig":"11"},{"size":1852,"mtime":1610382837060,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"z3ly9e",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/J3SUNG/twitter/src/index.js",[],["43","44"],"/J3SUNG/twitter/src/components/App.js",[],"/J3SUNG/twitter/src/components/Router.js",[],"/J3SUNG/twitter/src/routes/Home.js",["45"],"import Tweet from \"components/Tweet\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { dbService, storageService } from \"fbase\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Home = ({ userObj }) => {\n  const [tweet, setTweet] = useState(\"\");\n  const [tweets, setTweets] = useState([]);\n  const [attachment, setAttachment] = useState(\"\");\n  useEffect(() => {\n    dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n      const tweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setTweets(tweetArray);\n    });\n  }, []);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const tweetObj = {\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"tweets\").add(tweetObj);\n    setTweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setTweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n  };\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          value={tweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n        <input type=\"submit\" value=\"Tweet\" />\n        {attachment && (\n          <div>\n            <img src={attachment} wdith=\"50px\" height=\"50px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n      </form>\n      <div>\n        {tweets.map((tweet) => (\n          <Tweet\n            key={tweet.id}\n            tweetObj={tweet}\n            isOwner={tweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","/J3SUNG/twitter/src/routes/Auth.js",["46","47"],"import React, { useState } from \"react\";\nimport { authService, firebaseInstance } from \"../fbase\";\n\nconst Auth = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n  };\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In.\" : \"Create Account\"}\n      </span>\n      <div>\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","/J3SUNG/twitter/src/fbase.js",[],"/J3SUNG/twitter/src/components/Navigation.js",[],"/J3SUNG/twitter/src/routes/Profile.js",["48"],"import React, { useEffect } from \"react\";\n// import { useHistory } from \"react-router-dom\";\nimport { authService, dbService } from \"../fbase\";\n\nconst Profile = ({ userObj }) => {\n  // const history = useHistory();\n  const onLogOutClick = () => {\n    authService.signOut();\n    // history.push(\"/\");\n  };\n  const getMyTweets = async () => {\n    const tweets = await dbService\n      .collection(\"tweets\")\n      .where(\"creatorId\", \"==\", userObj.uid)\n      .orderBy(\"createdAt\")\n      .get();\n    console.log(tweets.docs.map((doc) => doc.data()));\n  };\n  useEffect(() => {\n    getMyTweets();\n  }, []);\n  return (\n    <>\n      <button onClick={onLogOutClick}>Log Out</button>\n    </>\n  );\n};\n\nexport default Profile;\n","/J3SUNG/twitter/src/components/Tweet.js",["49"],"import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n    console.log(ok);\n    if (ok) {\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => {\n    setEditing((prev) => !prev);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\n      text: newTweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewTweet(value);\n  };\n  return (\n    <div>\n      {isOwner && (\n        <>\n          {editing ? (\n            <>\n              <form onSubmit={onSubmit}>\n                <input\n                  type=\"text\"\n                  placeholder=\"Edit your tweet\"\n                  value={newTweet}\n                  required\n                  onChange={onChange}\n                />\n                <input type=\"submit\" value=\"Update Tweet\" />\n              </form>\n              <button onClick={toggleEditing}>Cancle</button>\n            </>\n          ) : (\n            <>\n              <h4>{tweetObj.text}</h4>\n              {tweetObj.attachmentUrl && (\n                <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n              )}\n              <button onClick={onDeleteClick}>Delete tweet</button>\n              <button onClick={toggleEditing}>Edit tweet</button>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tweet;\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":76,"column":13,"nodeType":"56","endLine":76,"endColumn":64},{"ruleId":"57","severity":1,"message":"58","line":29,"column":9,"nodeType":"59","messageId":"60","endLine":29,"endColumn":13},{"ruleId":"57","severity":1,"message":"58","line":46,"column":11,"nodeType":"59","messageId":"60","endLine":46,"endColumn":15},{"ruleId":"61","severity":1,"message":"62","line":21,"column":6,"nodeType":"63","endLine":21,"endColumn":8,"suggestions":"64"},{"ruleId":"54","severity":1,"message":"55","line":53,"column":17,"nodeType":"56","endLine":53,"endColumn":80},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyTweets'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [getMyTweets]",{"range":"70","text":"71"},[594,596],"[getMyTweets]"]